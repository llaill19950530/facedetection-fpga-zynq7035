//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// ?? ?? 29 2018 17:22:05
//
//      Input file      : 
//      Component name  : register_file
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------


module register_file(
   clk,
   write_en,
   write_reg_addr,
   write_data,
   q0,
   q1,
   q2,
   q3,
   q4,
   q5,
   q6,
   q7,
   q8,
   q9,
   q10,
   q11
);
   parameter                 ADDR_WIDTH = 4;
   parameter                 DATA_WIDTH = 18;
   input                     clk;
   input                     write_en;
   input [(ADDR_WIDTH-1):0]  write_reg_addr;
   input [(DATA_WIDTH-1):0]  write_data;
   output [(DATA_WIDTH-1):0] q0;
   output [(DATA_WIDTH-1):0] q1;
   output [(DATA_WIDTH-1):0] q2;
   output [(DATA_WIDTH-1):0] q3;
   output [(DATA_WIDTH-1):0] q4;
   output [(DATA_WIDTH-1):0] q5;
   output [(DATA_WIDTH-1):0] q6;
   output [(DATA_WIDTH-1):0] q7;
   output [(DATA_WIDTH-1):0] q8;
   output [(DATA_WIDTH-1):0] q9;
   output [(DATA_WIDTH-1):0] q10;
   output [(DATA_WIDTH-1):0] q11;
   
   
   reg [(DATA_WIDTH-1):0]    reg_xhdl0[0:(2**ADDR_WIDTH-1)];
   
   
   always @(posedge clk)
   begin
       begin
         if (write_en == 1'b1)
            reg_xhdl0[write_reg_addr] <= write_data;
      end 
   end
   assign q0 = reg_xhdl0[0];
   assign q1 = reg_xhdl0[1];
   assign q2 = reg_xhdl0[2];
   assign q3 = reg_xhdl0[3];
   assign q4 = reg_xhdl0[4];
   assign q5 = reg_xhdl0[5];
   assign q6 = reg_xhdl0[6];
   assign q7 = reg_xhdl0[7];
   assign q8 = reg_xhdl0[8];
   assign q9 = reg_xhdl0[9];
   assign q10 = reg_xhdl0[10];
   assign q11 = reg_xhdl0[11];
   
endmodule
