//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// ?? ?? 29 2018 17:10:22
//
//      Input file      : 
//      Component name  : ov7670_capture
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------


module ov7670_capture(pclk, capture, vsync, href, d, addr, dout, we, busy);
   input         pclk;
   input         capture;
   input         vsync;
   input         href;
   input [7:0]   d;
   output [16:0] addr;
   output [11:0] dout;
   output        we;
   output        busy;
   reg           busy;
   
   
   reg [15:0]    d_latch;
   reg [17:0]    address;
   reg [1:0]     line;
   reg [6:0]     href_last;
   reg           we_reg;
   reg           href_hold;
   reg           latched_vsync;
   reg           latched_href;
   reg [7:0]     latched_d;
   reg           latched_capture;
   
   assign addr = address[16:0];
   assign we = we_reg;
   assign dout = {d_latch[15:12], d_latch[10:7], d_latch[4:1]};
   
   
   always @(posedge pclk)
   begin: capture_process
      
      begin
         
         if (we_reg == 1'b1)
            address <= (address +8'd1);
         
         if (href_hold == 1'b0 & latched_href == 1'b1)
            case (line)
               2'b00 :
                  line <= 2'b01;
               2'b01 :
                  line <= 2'b10;
               2'b10 :
                  line <= 2'b11;
               default :
                  line <= 2'b00;
            endcase
      
         
         if (latched_href == 1'b1)
            d_latch <= {d_latch[7:0], latched_d};
         we_reg <= 1'b0;
         
         if (latched_vsync == 1'b1)
         begin
            address <= 18'b0;
            href_last <= 7'b0;
            line <= 2'b0;
            latched_capture <= capture;
            busy <= 1'b0;
         end
         else
         begin
            if (latched_capture == 1'b1)
               busy <= 1'b1;
            if (href_last[2] == 1'b1)
            begin
               if (line[1] == 1'b1)
               begin
                  if (latched_capture == 1'b1 & address < (320 * 240))
                     we_reg <= 1'b1;
               end
               href_last <= 7'b0;
            end
            else
               href_last <= {href_last[6 - 1:0], latched_href};
         end
      end
 end     
   always @(posedge pclk)
      begin
         latched_d <= d;
         latched_href <= href;
         latched_vsync <= vsync;
      	 href_hold <= latched_href;
      end

   
endmodule

