//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// ?? ?? 29 2018 21:58:08
//
//      Input file      : 
//      Component name  : subwindow_top
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------


module subwindow_top(reset, clk_sys, start, mem_state, x_pos_subwin0, y_pos_subwin0, ii_rddata, iix2_rddata, ii_rdaddress, iix2_rdaddress, fail_out, done);
   input                 reset;
   input                 clk_sys;
   input                 start;
   input                 mem_state;
   input [5:0]           x_pos_subwin0;
   input [5:0]           y_pos_subwin0;
   input [(16*20*2)-1:0] ii_rddata;
   input [(16*28*2)-1:0] iix2_rddata;
   output [8:0]          ii_rdaddress;
   output [8:0]          iix2_rdaddress;
   output [15:0]         fail_out;
   output                done;
   
   
   parameter [5:0]       II_WIDTH = 6'd39;
   parameter [5:0]       II_HEIGHT = 6'd59;
   
   wire [4:0]            strongStage_count;
   wire [11:0]           weakNode_count;
   wire [7:0]            weak_count;
   
   wire [7:0]            weak_stage_num;
   wire [11:0]           strong_thresh;
   
   wire [13:0]           left_tree;
   wire [13:0]           right_tree;
   wire [12:0]           weak_thresh;
   
   wire [14:0]           weight_rect0;
   wire [14:0]           weight_rect1;
   wire [14:0]           weight_rect2;
   
   wire [4:0]            x_rect0;
   wire [4:0]            x_rect1;
   wire [4:0]            x_rect2;
   wire [4:0]            y_rect0;
   wire [4:0]            y_rect1;
   wire [4:0]            y_rect2;
   wire [4:0]            w_rect0;
   wire [4:0]            w_rect1;
   wire [4:0]            w_rect2;
   wire [4:0]            h_rect0;
   wire [4:0]            h_rect1;
   wire [4:0]            h_rect2;
   
   reg [12:0]            ii_address_mux0;
   
   wire [12:0]           ii_address0;
   wire [19:0]           ii_data[0:15];
   wire [3:0]            ii_reg_index;
   
   wire [12:0]           iix2_address0;
   wire [27:0]           iix2_data[0:15];
   wire [1:0]            iix2_reg_index;
   
   wire [12:0]           p_offset0;
   
   reg                   cascade_done;
   wire                  cascade_start;
   
   reg                   subwindow_reset;
   reg                   en_strongAccum0;
   reg                   en_var_norm0;
   
   reg                   ii_reg_we0;
   wire [3:0]            ii_reg_address;
   
   reg                   ii_rdaddress_mux_sel;
   reg                   iix2_reg_we0;
   reg                   iix2_regLoad_DONE;
   reg                   iix2_regLoad_DONE_latch;
   reg                   iix2_regLoad_DONE_reset;
   
   reg [15:0]            fail_reg;
   reg                   fail_reg_latch;
   reg                   fail_reg_reset;
   wire [15:0]           face_detected_s;
   
   reg                   ii_reg_index_count_en;
   reg                   ii_reg_index_count_reset;
   reg                   weakNode_count_en;
   reg                   weakNode_count_reset;
   reg                   weak_count_en;
   reg                   weak_count_reset;
   reg                   strongStage_count_en;
   reg                   strongStage_count_reset;
   reg                   iix2_reg_index_count_en;
   reg                   iix2_reg_index_count_reset;
   
   parameter [3:0]       STATE_TYPE_s_RESET = 0,
                         STATE_TYPE_s_latch_ROM = 1,
                         STATE_TYPE_s_latch_RAM_address = 2,
                         STATE_TYPE_s_latch_iix2_reg = 3,
                         STATE_TYPE_s_latch_ii_reg = 4,
                         STATE_TYPE_s_latch_strongAccum = 5,
                         STATE_TYPE_s_strongCompare = 6,
                         STATE_TYPE_s_flagDone = 7,
                         STATE_TYPE_s_DONE = 8;
   reg [3:0]             current_state;
   reg [3:0]             next_state;
   
   wire                  clk;
   wire                  clk_memRead;
   
   assign cascade_start = start;
   assign clk = clk_sys;
   assign clk_memRead = clk_sys;
   
   
   parallel_dataPath_mux #(20) ii_data_mux(
   .clk(clk),
   .sel(ii_address_mux0[3:0]), 
   .a(ii_rddata[(16 * 20 * 1) - 1:0]), 
   .b(ii_rddata[(16 * 20 * 2) - 1:(16 * 20 * 1)]), 
   .q0(ii_data[0]), 
   .q1(ii_data[1]), 
   .q2(ii_data[2]), 
   .q3(ii_data[3]), 
   .q4(ii_data[4]), 
   .q5(ii_data[5]), 
   .q6(ii_data[6]), 
   .q7(ii_data[7]), 
   .q8(ii_data[8]), 
   .q9(ii_data[9]), 
   .q10(ii_data[10]), 
   .q11(ii_data[11]), 
   .q12(ii_data[12]), 
   .q13(ii_data[13]), 
   .q14(ii_data[14]), 
   .q15(ii_data[15])
   );
   
   
   parallel_dataPath_mux #(28) iix2_data_mux(
   .clk(clk),
   .sel(iix2_address0[3:0]), 
   .a(iix2_rddata[(16 * 28 * 1) - 1:0]), 
   .b(iix2_rddata[(16 * 28 * 2) - 1:(16 * 28 * 1)]), 
   .q0(iix2_data[0]), 
   .q1(iix2_data[1]), 
   .q2(iix2_data[2]), 
   .q3(iix2_data[3]), 
   .q4(iix2_data[4]), 
   .q5(iix2_data[5]), 
   .q6(iix2_data[6]), 
   .q7(iix2_data[7]), 
   .q8(iix2_data[8]), 
   .q9(iix2_data[9]), 
   .q10(iix2_data[10]), 
   .q11(iix2_data[11]), 
   .q12(iix2_data[12]), 
   .q13(iix2_data[13]), 
   .q14(iix2_data[14]), 
   .q15(iix2_data[15])
   );
   
   
   counter #(4) ii_reg_index_counter(
   .clk(clk), 
   .reset(ii_reg_index_count_reset), 
   .en(ii_reg_index_count_en), 
   .count(ii_reg_index)
   );
   
   
   counter #(2) iix2_reg_index_counter(
   .clk(clk), 
   .reset(iix2_reg_index_count_reset), 
   .en(iix2_reg_index_count_en), 
   .count(iix2_reg_index)
   );
   
   
   counter #(12) weakNode_counter(
   .clk(clk), 
   .reset(weakNode_count_reset), 
   .en(weakNode_count_en), 
   .count(weakNode_count)
   );
   
   
   counter #(8) weak_counter(
   .clk(clk), 
   .reset(weak_count_reset), 
   .en(weak_count_en), 
   .count(weak_count)
   );
   
   
   counter #(5) strongStage_counter(
   .clk(clk), 
   .reset(strongStage_count_reset), 
   .en(strongStage_count_en), 
   .count(strongStage_count)
   );
   
   
   always @(posedge	clk )
   begin
      if (fail_reg_reset == 1'b1)
         fail_reg <= 16'b0;
      else if (fail_reg_latch == 1'b1)
         fail_reg <= fail_reg | ((~face_detected_s));
   end
   assign fail_out = fail_reg;
   
   
   always @(posedge	clk)
   begin: iix2_regLoad_DONE_reg
      if (iix2_regLoad_DONE_reset == 1'b1)
         iix2_regLoad_DONE <= 1'b0;
      else if (iix2_regLoad_DONE_latch == 1'b1)
         iix2_regLoad_DONE <= 1'b1;
   end
   
   
   always @(posedge clk or posedge reset)
      if (reset == 1'b1)
         current_state <= STATE_TYPE_s_RESET;
      else 
         current_state <= next_state;
   
   
   always @(posedge	clk	)   begin   
  	  begin
      en_var_norm0 <= 1'b0;
      subwindow_reset <= 1'b0;
      en_strongAccum0 <= 1'b0;
      ii_reg_we0 <= 1'b0;
      ii_reg_index_count_en <= 1'b0;
      ii_reg_index_count_reset <= 1'b0;
      iix2_reg_we0 <= 1'b0;
      iix2_reg_index_count_en <= 1'b0;
      iix2_reg_index_count_reset <= 1'b0;
      weakNode_count_en <= 1'b0;
      weakNode_count_reset <= 1'b0;
      weak_count_en <= 1'b0;
      weak_count_reset <= 1'b0;
      strongStage_count_en <= 1'b0;
      strongStage_count_reset <= 1'b0;
      ii_rdaddress_mux_sel <= 1'b0;
      cascade_done <= 1'b0;
      fail_reg_latch <= 1'b0;
      fail_reg_reset <= 1'b0;
      iix2_regLoad_DONE_latch <= 1'b0;
      iix2_regLoad_DONE_reset <= 1'b0;
      end	
	case (current_state)
         STATE_TYPE_s_RESET :
            begin
               subwindow_reset <= 1'b1;
               ii_reg_index_count_reset <= 1'b1;
               iix2_reg_index_count_reset <= 1'b1;
               weakNode_count_reset <= 1'b1;
               weak_count_reset <= 1'b1;
               strongStage_count_reset <= 1'b1;
               fail_reg_reset <= 1'b1;
               iix2_regLoad_DONE_reset <= 1'b1;
               if (cascade_start == 1'b1)
                  next_state <= STATE_TYPE_s_latch_ROM;
               else
                  next_state <= STATE_TYPE_s_RESET;
            end
         
         STATE_TYPE_s_latch_ROM :
            next_state <= STATE_TYPE_s_latch_RAM_address;
         
         STATE_TYPE_s_latch_RAM_address :
            if (iix2_regLoad_DONE == 1'b0)
            begin
               ii_rdaddress_mux_sel <= 1'b1;
               next_state <= STATE_TYPE_s_latch_iix2_reg;
            end
            else
               next_state <= STATE_TYPE_s_latch_ii_reg;
         
         STATE_TYPE_s_latch_iix2_reg :
            begin
               ii_rdaddress_mux_sel <= 1'b1;
               iix2_reg_we0 <= 1'b1;
               if (iix2_reg_index == 3)
               begin
                  en_var_norm0 <= 1'b1;
                  iix2_regLoad_DONE_latch <= 1'b1;
                  next_state <= STATE_TYPE_s_latch_RAM_address;
               end
               else
               begin
                  iix2_reg_index_count_en <= 1'b1;
                  next_state <= STATE_TYPE_s_latch_RAM_address;
               end
            end
         
         STATE_TYPE_s_latch_ii_reg :
            begin
               en_var_norm0 <= 1'b1;
               ii_reg_we0 <= 1'b1;
               if (ii_reg_index == 11)
                  next_state <= STATE_TYPE_s_latch_strongAccum;
               else
               begin
                  ii_reg_index_count_en <= 1'b1;
                  next_state <= STATE_TYPE_s_latch_RAM_address;
               end
            end
         
         STATE_TYPE_s_latch_strongAccum :
            begin
               en_strongAccum0 <= 1'b1;
               ii_reg_index_count_reset <= 1'b1;
               if (weak_count < (weak_stage_num - 1))
               begin
                  weakNode_count_en <= 1'b1;
                  weak_count_en <= 1'b1;
                  next_state <= STATE_TYPE_s_latch_ROM;
               end
               else
                  next_state <= STATE_TYPE_s_strongCompare;
            end
         
         STATE_TYPE_s_strongCompare :
            if (weakNode_count < 12'd2911)
            begin
               weakNode_count_en <= 1'b1;
               subwindow_reset <= 1'b1;
               fail_reg_latch <= 1'b1;
               weak_count_reset <= 1'b1;
               strongStage_count_en <= 1'b1;
               next_state <= STATE_TYPE_s_latch_ROM;
            end
            else
            begin
               fail_reg_latch <= 1'b1;
               next_state <= STATE_TYPE_s_flagDone;
            end
         
         STATE_TYPE_s_flagDone :
            begin
               cascade_done <= 1'b1;
               next_state <= STATE_TYPE_s_DONE;
            end
         
         STATE_TYPE_s_DONE :
            next_state <= STATE_TYPE_s_DONE;
      endcase
   end
   
   
   pixel_offset pixel_offset0(
   .mem_state(mem_state), 
   .x_pos_subwin(x_pos_subwin0), 
   .y_pos_subwin(y_pos_subwin0), 
   .width_ii(II_WIDTH), 
   .p_offset(p_offset0)
   );
   
   
   ii_address_decoder ii_address_decoder0(
   .clk(clk),
   .ii_reg_index(ii_reg_index), 
   .width_ii(II_WIDTH), 
   .p_offset(p_offset0), 
   .x_rect0(x_rect0), 
   .x_rect1(x_rect1), 
   .x_rect2(x_rect2), 
   .y_rect0(y_rect0), 
   .y_rect1(y_rect1), 
   .y_rect2(y_rect2), 
   .w_rect0(w_rect0), 
   .w_rect1(w_rect1), 
   .w_rect2(w_rect2), 
   .h_rect0(h_rect0), 
   .h_rect1(h_rect1), 
   .h_rect2(h_rect2), 
   .ii_address(ii_address0)
   );
   
   
   
   always @(ii_rdaddress_mux_sel or ii_address0 or iix2_address0)
   begin: ii_ram_addr_mux
      if (ii_rdaddress_mux_sel == 1'b1)
         ii_address_mux0 <= iix2_address0;
      else
         ii_address_mux0 <= ii_address0;
   end
   
   
   iix2_address_decoder iix2_address_decoder0(
   .iix2_reg_index(iix2_reg_index), 
   .width_ii(II_WIDTH), 
   .p_offset(p_offset0), 
   .iix2_address(iix2_address0),
   .clk(clk_sys)
   );
   
   
   //(* ramstyle = " no_rw_check, m4k " , ram_init_file = "XXXXX.mif " *) reg [7:0] RAM [1023:0];
	
	
	
	
	stongThresh_rom	stongThresh_rom_inst(
      .dina(12'b0),
      .addrb(strongStage_count[4:0]),
      .clkb(clk_memRead),
      .addra(5'b0),
      .clka(clk),
      .ena(1'b0),
      .wea(1'b1),
      .enb(1'b1),
      .doutb(strong_thresh)
   );
   
   //-- Weak Stages Num ROM ---- 
   // specifies the number of weak stages in the current strong stage calculation
   // 25 strong theshold stages ... weak stage number values range from 9 to 211 ... 8 bit unsigned
   // max address = 25-1 ... for addressing from 0 to (25-1) ... 5 bit unsigned address width
   
   weakStageNum_rom weakStageNum_rom_inst(
      .dina(8'b0),
      .addrb(strongStage_count[4:0]),
      .clkb(clk_memRead),
      .addra(8'b0),
      .clka(clk),
      .ena(1'b0),
      .wea(1'b1),
      .enb(1'b1),
      .doutb(weak_stage_num)
   );
   
   //-- Weak Node ROM ----
   // stores classifier cascade parameters relivent to the weak node count
   // 2913 weak nodes ... 12 bit unsigned address width
   // max address = 2913-1 ... for addressing from 0 to (2913-1) 
   // weight values range from -4096 to 12288 ... 15 bit signed data width
   // rectangle x,y,w,h values range from 0 to 23 ... 5 bit unsigned data width
   // left tree values range from ___ to ___ ... 14 bit signed data width
   // right tree values range from ___ to ___ ... 14 bit signed data width
   // weak tree threshold values range from -1647 to 2705 ... 13 bit signed
   
   weight0_rom	weight0_rom_inst(
      .dina(15'b0),
      .addrb(weakNode_count[11:0]),
      .clkb(clk_memRead),
      .addra(12'b0),
      .clka(clk),
      .ena(1'b0),
      .wea(1'b1),
      .enb(1'b1),
      .doutb(weight_rect0)
   );
   
   
   weight1_rom weight1_rom_inst(
      .dina(15'b0),
      .addrb(weakNode_count[11:0]),
      .clkb(clk_memRead),
      .addra(12'b0),
      .clka(clk),
      .ena(1'b0),
      .wea(1'b1),
      .enb(1'b1),
      .doutb(weight_rect1)
   );
   
   
    weight2_rom	weight2_rom_inst(
      .dina(15'b0),
      .addrb(weakNode_count[11:0]),
      .clkb(clk_memRead),
      .addra(12'b0),
      .clka(clk),
      .ena(1'b0),
      .wea(1'b1),
      .enb(1'b1),
      .doutb(weight_rect2)
   );
   
   
   x_rect0_rom x_rect0_rom_inst(
      .dina(5'b0),
      .addrb(weakNode_count[11:0]),
      .clkb(clk_memRead),
      .addra(12'b0),
      .clka(clk),
      .ena(1'b0),
      .wea(1'b1),
      .enb(1'b1),
      .doutb(x_rect0)
   );
   
   
   x_rect1_rom x_rect1_rom_inst(
      .dina(5'b0),
      .addrb(weakNode_count[11:0]),
      .clkb(clk_memRead),
      .addra(12'b0),
      .clka(clk),
      .ena(1'b0),
      .wea(1'b1),
      .enb(1'b1),
      .doutb(x_rect1)
   );
   
   
   x_rect2_rom x_rect2_rom_inst(
      .dina(5'b0),
      .addrb(weakNode_count[11:0]),
      .clkb(clk_memRead),
      .addra(12'b0),
      .clka(clk),
      .ena(1'b0),
      .wea(1'b1),
      .enb(1'b1),
      .doutb(x_rect2)
   );
   
   
   y_rect0_rom y_rect0_rom_inst(
      .dina(5'b0),
      .addrb(weakNode_count[11:0]),
      .clkb(clk_memRead),
      .addra(12'b0),
      .clka(clk),
      .ena(1'b0),
      .wea(1'b1),
      .enb(1'b1),
      .doutb(y_rect0)
   );
   
   
   y_rect1_rom y_rect1_rom_inst(
      .dina(5'b0),
      .addrb(weakNode_count[11:0]),
      .clkb(clk_memRead),
      .addra(12'b0),
      .clka(clk),
      .ena(1'b0),
      .wea(1'b1),
      .enb(1'b1),
      .doutb(y_rect1)
   );
   
   
   y_rect2_rom y_rect2_rom_inst(
      .dina(5'b0),
      .addrb(weakNode_count[11:0]),
      .clkb(clk_memRead),
      .addra(12'b0),
      .clka(clk),
      .ena(1'b0),
      .wea(1'b1),
      .enb(1'b1),
      .doutb(y_rect2)
   );
   
   
   w_rect0_rom w_rect0_rom_inst(
      .dina(5'b0),
      .addrb(weakNode_count[11:0]),
      .clkb(clk_memRead),
      .addra(12'b0),
      .clka(clk),
      .ena(1'b0),
      .wea(1'b1),
      .enb(1'b1),
      .doutb(w_rect0)
   );
   
   
   w_rect1_rom w_rect1_rom_inst(
      .dina(5'b0),
      .addrb(weakNode_count[11:0]),
      .clkb(clk_memRead),
      .addra(12'b0),
      .clka(clk),
      .ena(1'b0),
      .wea(1'b1),
      .enb(1'b1),
      .doutb(w_rect1)
   );
   
   
   w_rect2_rom w_rect2_rom_inst(
      .dina(5'b0),
      .addrb(weakNode_count[11:0]),
      .clkb(clk_memRead),
      .addra(12'b0),
      .clka(clk),
      .ena(1'b0),
      .wea(1'b1),
      .enb(1'b1),
      .doutb(w_rect2)
   );
   
   
   h_rect0_rom h_rect0_rom_inst(
      .dina(5'b0),
      .addrb(weakNode_count[11:0]),
      .clkb(clk_memRead),
      .addra(12'b0),
      .clka(clk),
      .ena(1'b0),
      .wea(1'b1),
      .enb(1'b1),
      .doutb(h_rect0)
   );
   
   
   h_rect1_rom h_rect1_rom_inst(
      .dina(5'b0),
      .addrb(weakNode_count[11:0]),
      .clkb(clk_memRead),
      .addra(12'b0),
      .clka(clk),
      .ena(1'b0),
      .wea(1'b1),
      .enb(1'b1),
      .doutb(h_rect1)
   );
   
   
   h_rect2_rom h_rect2_rom_inst(
      .dina(5'b0),
      .addrb(weakNode_count[11:0]),
      .clkb(clk_memRead),
      .addra(12'b0),
      .clka(clk),
      .ena(1'b0),
      .wea(1'b1),
      .enb(1'b1),
      .doutb(h_rect2)
   );
   
   
   left_tree_rom left_tree_rom_inst(
      .dina(14'b0),
      .addrb(weakNode_count[11:0]),
      .clkb(clk_memRead),
      .addra(12'b0),
      .clka(clk),
      .ena(1'b0),
      .wea(1'b1),
      .enb(1'b1),
      .doutb(left_tree)
   );
   
   
   right_tree_rom right_tree_rom_inst(
      .dina(14'b0),
      .addrb(weakNode_count[11:0]),
      .clkb(clk_memRead),
      .addra(12'b0),
      .clka(clk),
      .ena(1'b0),
      .wea(1'b1),
      .enb(1'b1),
      .doutb(right_tree)
   );
   
   
   weakThresh_rom weakThresh_rom_inst(
      .dina(13'b0),
      .addrb(weakNode_count[11:0]),
      .clkb(clk_memRead),
      .addra(12'b0),
      .clka(clk),
      .ena(1'b0),
      .wea(1'b1),
      .enb(1'b1),
      .doutb(weak_thresh)
   );
   
   subwindow subwindow0(
   .reset(subwindow_reset), 
   .clk(clk), 
   .en_strongAccum(en_strongAccum0), 
   .en_var_norm(en_var_norm0), 
   .left_tree(left_tree), 
   .right_tree(right_tree), 
   .weak_thresh(weak_thresh), 
   .strong_thresh(strong_thresh), 
   .w0(weight_rect0), 
   .w1(weight_rect1), 
   .w2(weight_rect2), 
   .ii_reg_we(ii_reg_we0), 
   .ii_reg_address(ii_reg_index), 
   .ii_data(ii_data[0]), 
   .iix2_reg_we(iix2_reg_we0), 
   .iix2_reg_index(iix2_reg_index), 
   .iix2_data(iix2_data[0]), 
   .detection(face_detected_s[0])
   );
   
   
   subwindow subwindow1(
   .reset(subwindow_reset), 
   .clk(clk), 
   .en_strongAccum(en_strongAccum0), 
   .en_var_norm(en_var_norm0), 
   .left_tree(left_tree), 
   .right_tree(right_tree), 
   .weak_thresh(weak_thresh), 
   .strong_thresh(strong_thresh), 
   .w0(weight_rect0), 
   .w1(weight_rect1), 
   .w2(weight_rect2), 
   .ii_reg_we(ii_reg_we0), 
   .ii_reg_address(ii_reg_index), 
   .ii_data(ii_data[1]), 
   .iix2_reg_we(iix2_reg_we0), 
   .iix2_reg_index(iix2_reg_index), 
   .iix2_data(iix2_data[1]), 
   .detection(face_detected_s[1])
   );
   
   
   subwindow subwindow2(
   .reset(subwindow_reset), 
   .clk(clk), 
   .en_strongAccum(en_strongAccum0), 
   .en_var_norm(en_var_norm0), 
   .left_tree(left_tree), 
   .right_tree(right_tree), 
   .weak_thresh(weak_thresh), 
   .strong_thresh(strong_thresh), 
   .w0(weight_rect0), 
   .w1(weight_rect1), 
   .w2(weight_rect2), 
   .ii_reg_we(ii_reg_we0), 
   .ii_reg_address(ii_reg_index), 
   .ii_data(ii_data[2]), 
   .iix2_reg_we(iix2_reg_we0), 
   .iix2_reg_index(iix2_reg_index), 
   .iix2_data(iix2_data[2]), 
   .detection(face_detected_s[2]));
   
   
   subwindow subwindow3(
   .reset(subwindow_reset), 
   .clk(clk), 
   .en_strongAccum(en_strongAccum0), 
   .en_var_norm(en_var_norm0), 
   .left_tree(left_tree), 
   .right_tree(right_tree), 
   .weak_thresh(weak_thresh), 
   .strong_thresh(strong_thresh), 
   .w0(weight_rect0), 
   .w1(weight_rect1), 
   .w2(weight_rect2), 
   .ii_reg_we(ii_reg_we0), 
   .ii_reg_address(ii_reg_index), 
   .ii_data(ii_data[3]), 
   .iix2_reg_we(iix2_reg_we0), 
   .iix2_reg_index(iix2_reg_index), 
   .iix2_data(iix2_data[3]), 
   .detection(face_detected_s[3])
   );
   
   
   subwindow subwindow4(
   .reset(subwindow_reset), 
   .clk(clk), 
   .en_strongAccum(en_strongAccum0), 
   .en_var_norm(en_var_norm0), 
   .left_tree(left_tree), 
   .right_tree(right_tree), 
   .weak_thresh(weak_thresh), 
   .strong_thresh(strong_thresh), 
   .w0(weight_rect0), 
   .w1(weight_rect1), 
   .w2(weight_rect2), 
   .ii_reg_we(ii_reg_we0), 
   .ii_reg_address(ii_reg_index), 
   .ii_data(ii_data[4]), 
   .iix2_reg_we(iix2_reg_we0), 
   .iix2_reg_index(iix2_reg_index), 
   .iix2_data(iix2_data[4]), 
   .detection(face_detected_s[4])
   );
   
   
   subwindow subwindow5(
   .reset(subwindow_reset), 
   .clk(clk), 
   .en_strongAccum(en_strongAccum0),
   .en_var_norm(en_var_norm0), 
   .left_tree(left_tree), 
   .right_tree(right_tree), 
   .weak_thresh(weak_thresh), 
   .strong_thresh(strong_thresh), 
   .w0(weight_rect0), 
   .w1(weight_rect1), 
   .w2(weight_rect2), 
   .ii_reg_we(ii_reg_we0), 
   .ii_reg_address(ii_reg_index), 
   .ii_data(ii_data[5]), 
   .iix2_reg_we(iix2_reg_we0), 
   .iix2_reg_index(iix2_reg_index), 
   .iix2_data(iix2_data[5]), 
   .detection(face_detected_s[5])
   );
   
   
   subwindow subwindow6(
   .reset(subwindow_reset), 
   .clk(clk), 
   .en_strongAccum(en_strongAccum0), 
   .en_var_norm(en_var_norm0), 
   .left_tree(left_tree), 
   .right_tree(right_tree), 
   .weak_thresh(weak_thresh), 
   .strong_thresh(strong_thresh), 
   .w0(weight_rect0), 
   .w1(weight_rect1), 
   .w2(weight_rect2), 
   .ii_reg_we(ii_reg_we0), 
   .ii_reg_address(ii_reg_index), 
   .ii_data(ii_data[6]), 
   .iix2_reg_we(iix2_reg_we0), 
   .iix2_reg_index(iix2_reg_index), 
   .iix2_data(iix2_data[6]), 
   .detection(face_detected_s[6]
   ));
   
   
   subwindow subwindow7(
   .reset(subwindow_reset), 
   .clk(clk), 
   .en_strongAccum(en_strongAccum0), 
   .en_var_norm(en_var_norm0), 
   .left_tree(left_tree), 
   .right_tree(right_tree), 
   .weak_thresh(weak_thresh), 
   .strong_thresh(strong_thresh), 
   .w0(weight_rect0), 
   .w1(weight_rect1), 
   .w2(weight_rect2), 
   .ii_reg_we(ii_reg_we0), 
   .ii_reg_address(ii_reg_index), 
   .ii_data(ii_data[7]), 
   .iix2_reg_we(iix2_reg_we0), 
   .iix2_reg_index(iix2_reg_index), 
   .iix2_data(iix2_data[7]), 
   .detection(face_detected_s[7])
   );
   
   
   subwindow subwindow8(
   .reset(subwindow_reset), 
   .clk(clk), 
   .en_strongAccum(en_strongAccum0), 
   .en_var_norm(en_var_norm0), 
   .left_tree(left_tree), 
   .right_tree(right_tree), 
   .weak_thresh(weak_thresh), 
   .strong_thresh(strong_thresh), 
   .w0(weight_rect0), 
   .w1(weight_rect1), 
   .w2(weight_rect2), 
   .ii_reg_we(ii_reg_we0), 
   .ii_reg_address(ii_reg_index), 
   .ii_data(ii_data[8]), 
   .iix2_reg_we(iix2_reg_we0), 
   .iix2_reg_index(iix2_reg_index), 
   .iix2_data(iix2_data[8]), 
   .detection(face_detected_s[8])
   );
   
   
   subwindow subwindow9(
   .reset(subwindow_reset), 
   .clk(clk), 
   .en_strongAccum(en_strongAccum0), 
   .en_var_norm(en_var_norm0), 
   .left_tree(left_tree), 
   .right_tree(right_tree), 
   .weak_thresh(weak_thresh), 
   .strong_thresh(strong_thresh), 
   .w0(weight_rect0), 
   .w1(weight_rect1), 
   .w2(weight_rect2), 
   .ii_reg_we(ii_reg_we0), 
   .ii_reg_address(ii_reg_index), 
   .ii_data(ii_data[9]), 
   .iix2_reg_we(iix2_reg_we0), 
   .iix2_reg_index(iix2_reg_index), 
   .iix2_data(iix2_data[9]), 
   .detection(face_detected_s[9])
   );
   
   
   subwindow subwindow10(
   .reset(subwindow_reset), 
   .clk(clk), 
   .en_strongAccum(en_strongAccum0), 
   .en_var_norm(en_var_norm0), 
   .left_tree(left_tree), 
   .right_tree(right_tree), 
   .weak_thresh(weak_thresh), 
   .strong_thresh(strong_thresh), 
   .w0(weight_rect0), 
   .w1(weight_rect1), 
   .w2(weight_rect2), 
   .ii_reg_we(ii_reg_we0), 
   .ii_reg_address(ii_reg_index), 
   .ii_data(ii_data[10]), 
   .iix2_reg_we(iix2_reg_we0), 
   .iix2_reg_index(iix2_reg_index), 
   .iix2_data(iix2_data[10]), 
   .detection(face_detected_s[10])
   );
   
   
   subwindow subwindow11(
   .reset(subwindow_reset), 
   .clk(clk), 
   .en_strongAccum(en_strongAccum0), 
   .en_var_norm(en_var_norm0), 
   .left_tree(left_tree), 
   .right_tree(right_tree), 
   .weak_thresh(weak_thresh), 
   .strong_thresh(strong_thresh), 
   .w0(weight_rect0), 
   .w1(weight_rect1), 
   .w2(weight_rect2), 
   .ii_reg_we(ii_reg_we0), 
   .ii_reg_address(ii_reg_index), 
   .ii_data(ii_data[11]), 
   .iix2_reg_we(iix2_reg_we0), 
   .iix2_reg_index(iix2_reg_index), 
   .iix2_data(iix2_data[11]), 
   .detection(face_detected_s[11])
   );
   
   
   subwindow subwindow12(
   .reset(subwindow_reset), 
   .clk(clk), 
   .en_strongAccum(en_strongAccum0), 
   .en_var_norm(en_var_norm0), 
   .left_tree(left_tree), 
   .right_tree(right_tree), 
   .weak_thresh(weak_thresh), 
   .strong_thresh(strong_thresh), 
   .w0(weight_rect0), 
   .w1(weight_rect1), 
   .w2(weight_rect2), 
   .ii_reg_we(ii_reg_we0), 
   .ii_reg_address(ii_reg_index), 
   .ii_data(ii_data[12]), 
   .iix2_reg_we(iix2_reg_we0), 
   .iix2_reg_index(iix2_reg_index), 
   .iix2_data(iix2_data[12]),
   .detection(face_detected_s[12])
   );
   
   
   subwindow subwindow13(
   .reset(subwindow_reset), 
   .clk(clk), 
   .en_strongAccum(en_strongAccum0), 
   .en_var_norm(en_var_norm0), 
   .left_tree(left_tree), 
   .right_tree(right_tree), 
   .weak_thresh(weak_thresh), 
   .strong_thresh(strong_thresh), 
   .w0(weight_rect0), 
   .w1(weight_rect1), 
   .w2(weight_rect2), 
   .ii_reg_we(ii_reg_we0), 
   .ii_reg_address(ii_reg_index), 
   .ii_data(ii_data[13]), 
   .iix2_reg_we(iix2_reg_we0), 
   .iix2_reg_index(iix2_reg_index), 
   .iix2_data(iix2_data[13]), 
   .detection(face_detected_s[13])
   );
   
   
   subwindow subwindow14(
   .reset(subwindow_reset), 
   .clk(clk), 
   .en_strongAccum(en_strongAccum0), 
   .en_var_norm(en_var_norm0), 
   .left_tree(left_tree), 
   .right_tree(right_tree), 
   .weak_thresh(weak_thresh), 
   .strong_thresh(strong_thresh), 
   .w0(weight_rect0), 
   .w1(weight_rect1), 
   .w2(weight_rect2), 
   .ii_reg_we(ii_reg_we0), 
   .ii_reg_address(ii_reg_index), 
   .ii_data(ii_data[14]), 
   .iix2_reg_we(iix2_reg_we0), 
   .iix2_reg_index(iix2_reg_index), 
   .iix2_data(iix2_data[14]), 
   .detection(face_detected_s[14])
   );
   
   
   subwindow subwindow15(
   .reset(subwindow_reset), 
   .clk(clk), 
   .en_strongAccum(en_strongAccum0), 
   .en_var_norm(en_var_norm0), 
   .left_tree(left_tree), 
   .right_tree(right_tree), 
   .weak_thresh(weak_thresh), 
   .strong_thresh(strong_thresh), 
   .w0(weight_rect0), 
   .w1(weight_rect1), 
   .w2(weight_rect2), 
   .ii_reg_we(ii_reg_we0), 
   .ii_reg_address(ii_reg_index), 
   .ii_data(ii_data[15]), 
   .iix2_reg_we(iix2_reg_we0), 
   .iix2_reg_index(iix2_reg_index), 
   .iix2_data(iix2_data[15]), 
   .detection(face_detected_s[15])
   );
   
   assign ii_rdaddress = ii_address_mux0[12:4];
   assign iix2_rdaddress = iix2_address0[12:4];
   
   assign done = cascade_done;
   
endmodule
