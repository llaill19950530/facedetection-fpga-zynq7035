//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// ?? ?? 29 2018 17:10:44
//
//      Input file      : 
//      Component name  : parallel_datapath_mux
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------


module parallel_dataPath_mux(sel, a, b, q0, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11, q12, q13, q14, q15,clk);
   parameter                       DATA_WIDTH_OUT = 23;
   input						   clk;
   input [3:0]                     sel;
   input [(16*DATA_WIDTH_OUT)-1:0] a;
   input [(16*DATA_WIDTH_OUT)-1:0] b;
   output [DATA_WIDTH_OUT-1:0]     q0;
   output [DATA_WIDTH_OUT-1:0]     q1;
   output [DATA_WIDTH_OUT-1:0]     q2;
   output [DATA_WIDTH_OUT-1:0]     q3;
   output [DATA_WIDTH_OUT-1:0]     q4;
   output [DATA_WIDTH_OUT-1:0]     q5;
   output [DATA_WIDTH_OUT-1:0]     q6;
   output [DATA_WIDTH_OUT-1:0]     q7;
   output [DATA_WIDTH_OUT-1:0]     q8;
   output [DATA_WIDTH_OUT-1:0]     q9;
   output [DATA_WIDTH_OUT-1:0]     q10;
   output [DATA_WIDTH_OUT-1:0]     q11;
   output [DATA_WIDTH_OUT-1:0]     q12;
   output [DATA_WIDTH_OUT-1:0]     q13;
   output [DATA_WIDTH_OUT-1:0]     q14;
   output [DATA_WIDTH_OUT-1:0]     q15;
   
   
   reg [(16*DATA_WIDTH_OUT)-1:0]   path;
   
   
   always @(posedge clk)
   begin
      case (sel)
         4'h0 :
            path <= a[(16 * DATA_WIDTH_OUT) - 1:0];
         4'h1 :
            path <= {b[(1 * DATA_WIDTH_OUT) - 1:0], a[(16 * DATA_WIDTH_OUT) - 1:(1 * DATA_WIDTH_OUT)]};
         4'h2 :
            path <= {b[(2 * DATA_WIDTH_OUT) - 1:0], a[(16 * DATA_WIDTH_OUT) - 1:(2 * DATA_WIDTH_OUT)]};
         4'h3 :
            path <= {b[(3 * DATA_WIDTH_OUT) - 1:0], a[(16 * DATA_WIDTH_OUT) - 1:(3 * DATA_WIDTH_OUT)]};
         4'h4 :
            path <= {b[(4 * DATA_WIDTH_OUT) - 1:0], a[(16 * DATA_WIDTH_OUT) - 1:(4 * DATA_WIDTH_OUT)]};
         4'h5 :
            path <= {b[(5 * DATA_WIDTH_OUT) - 1:0], a[(16 * DATA_WIDTH_OUT) - 1:(5 * DATA_WIDTH_OUT)]};
         4'h6 :
            path <= {b[(6 * DATA_WIDTH_OUT) - 1:0], a[(16 * DATA_WIDTH_OUT) - 1:(6 * DATA_WIDTH_OUT)]};
         4'h7 :
            path <= {b[(7 * DATA_WIDTH_OUT) - 1:0], a[(16 * DATA_WIDTH_OUT) - 1:(7 * DATA_WIDTH_OUT)]};
         4'h8 :
            path <= {b[(8 * DATA_WIDTH_OUT) - 1:0], a[(16 * DATA_WIDTH_OUT) - 1:(8 * DATA_WIDTH_OUT)]};
         4'h9 :
            path <= {b[(9 * DATA_WIDTH_OUT) - 1:0], a[(16 * DATA_WIDTH_OUT) - 1:(9 * DATA_WIDTH_OUT)]};
         4'hA :
            path <= {b[(10 * DATA_WIDTH_OUT) - 1:0], a[(16 * DATA_WIDTH_OUT) - 1:(10 * DATA_WIDTH_OUT)]};
         4'hB :
            path <= {b[(11 * DATA_WIDTH_OUT) - 1:0], a[(16 * DATA_WIDTH_OUT) - 1:(11 * DATA_WIDTH_OUT)]};
         4'hC :
            path <= {b[(12 * DATA_WIDTH_OUT) - 1:0], a[(16 * DATA_WIDTH_OUT) - 1:(12 * DATA_WIDTH_OUT)]};
         4'hD :
            path <= {b[(13 * DATA_WIDTH_OUT) - 1:0], a[(16 * DATA_WIDTH_OUT) - 1:(13 * DATA_WIDTH_OUT)]};
         4'hE :
            path <= {b[(14 * DATA_WIDTH_OUT) - 1:0], a[(16 * DATA_WIDTH_OUT) - 1:(14 * DATA_WIDTH_OUT)]};
         4'hF :
            path <= {b[(15 * DATA_WIDTH_OUT) - 1:0], a[(16 * DATA_WIDTH_OUT) - 1:(15 * DATA_WIDTH_OUT)]};
         default :
            path <= {16*DATA_WIDTH_OUT-1+1{1'b0}};
      endcase
   end
   
   assign q0 = path[(1 * DATA_WIDTH_OUT) - 1:0];
   assign q1 = path[(2 * DATA_WIDTH_OUT) - 1:(1 * DATA_WIDTH_OUT)];
   assign q2 = path[(3 * DATA_WIDTH_OUT) - 1:(2 * DATA_WIDTH_OUT)];
   assign q3 = path[(4 * DATA_WIDTH_OUT) - 1:(3 * DATA_WIDTH_OUT)];
   assign q4 = path[(5 * DATA_WIDTH_OUT) - 1:(4 * DATA_WIDTH_OUT)];
   assign q5 = path[(6 * DATA_WIDTH_OUT) - 1:(5 * DATA_WIDTH_OUT)];
   assign q6 = path[(7 * DATA_WIDTH_OUT) - 1:(6 * DATA_WIDTH_OUT)];
   assign q7 = path[(8 * DATA_WIDTH_OUT) - 1:(7 * DATA_WIDTH_OUT)];
   assign q8 = path[(9 * DATA_WIDTH_OUT) - 1:(8 * DATA_WIDTH_OUT)];
   assign q9 = path[(10 * DATA_WIDTH_OUT) - 1:(9 * DATA_WIDTH_OUT)];
   assign q10 = path[(11 * DATA_WIDTH_OUT) - 1:(10 * DATA_WIDTH_OUT)];
   assign q11 = path[(12 * DATA_WIDTH_OUT) - 1:(11 * DATA_WIDTH_OUT)];
   assign q12 = path[(13 * DATA_WIDTH_OUT) - 1:(12 * DATA_WIDTH_OUT)];
   assign q13 = path[(14 * DATA_WIDTH_OUT) - 1:(13 * DATA_WIDTH_OUT)];
   assign q14 = path[(15 * DATA_WIDTH_OUT) - 1:(14 * DATA_WIDTH_OUT)];
   assign q15 = path[(16 * DATA_WIDTH_OUT) - 1:(15 * DATA_WIDTH_OUT)];
   
endmodule
